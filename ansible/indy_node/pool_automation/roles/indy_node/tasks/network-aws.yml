---
- name: Get physical interfaces names
  command: find /sys/class/net -type l -not -lname '*virtual*' -name '*ens*' -printf '%f\n'
  register: network_interfaces
  tags:
    - configure
    - network

- name: Fail when two network interfaces are not found
  fail: msg="Two NICs are required, but found {{ network_interfaces.stdout_lines|sort|count }}"
  when: network_interfaces.stdout_lines|count != 2
  tags:
    - configure
    - network

- name: Disable network management
  shell: >
          echo 'network: {config: disabled}' > /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg
  tags:
     - configure
     - network

- name: Remove NIC-1 auto config
  copy:
    src: network-interface/aws/50-cloud-init.cfg
    dest: /etc/network/interfaces.d/50-cloud-init.cfg
    owner: root
    group: root
  become: true
  tags:
     - configure
     - network

# =================================================================================
# Get NIC-1 details
# ---------------------------------------------------------------------------------
- name: Set eth0 variable
  set_fact:
     eth0: "{{ (network_interfaces.stdout_lines|sort)[0] }}"
  tags:
    - configure
    - network

- name: Find eth0 mac
  shell: cat /sys/class/net/{{ eth0 }}/address
  register: eth0_mac_cmd
  tags:
     - configure
     - network

- name: Set eth0_mac variable
  set_fact:
     eth0_mac: "{{ eth0_mac_cmd.stdout_lines[0] }}"
  tags:
    - configure
    - network

- name: Find eth0 ip address
  shell: curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/{{ eth0_mac }}/local-ipv4s
  register: eth0_ip_cmd
  tags:
     - configure
     - network

- name: Set eth0_ip variable
  set_fact:
     eth0_ip: "{{ eth0_ip_cmd.stdout_lines[0] }}"
  tags:
    - configure
    - network

- name: Find eth0 gateway address
  shell: >
          route -n |
          grep ^0.0.0.0 |
          awk '{print $2}'
  register: eth0_gw_cmd
  tags:
     - configure
     - network

- name: Set eth0_gw variable
  set_fact:
     eth0_gw: "{{ eth0_gw_cmd.stdout_lines[0] }}"
  tags:
    - configure
    - network
# =================================================================================

# =================================================================================
# Get NIC-2 details
# ---------------------------------------------------------------------------------
- name: Set eth1 variable
  set_fact:
     eth1: "{{ (network_interfaces.stdout_lines|sort)[-1] }}"
  tags:
    - configure
    - network

- name: Find eth1 mac
  shell: cat /sys/class/net/{{ eth1 }}/address
  register: eth1_mac_cmd
  tags:
     - configure
     - network

- name: Set eth1_mac variable
  set_fact:
     eth1_mac: "{{ eth1_mac_cmd.stdout_lines[0] }}"
  tags:
    - configure
    - network

- name: Find eth1 ip address
  shell: curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/{{ eth1_mac }}/local-ipv4s
  register: eth1_ip_cmd
  tags:
     - configure
     - network

- name: Set eth1_ip variable
  set_fact:
     eth1_ip: "{{ eth1_ip_cmd.stdout_lines[0] }}"
  tags:
    - configure
    - network

- name: Find eth1 gateway address
  shell: >
          echo "{{ eth1_ip }}" |
          awk -F"." '{print $1"."$2"."$3".1"}'
  register: eth1_gw_cmd
  tags:
     - configure
     - network

- name: Set eth1_gw variable
  set_fact:
     eth1_gw: "{{ eth1_gw_cmd.stdout_lines[0] }}"
  tags:
    - configure
    - network
# =================================================================================

- name: Print NICs details
  debug:
    msg:  "NIC1: {{ eth0 }} IP: {{ eth0_ip }} GW: {{ eth0_gw }}; NIC2: {{ eth1 }} IP: {{ eth1_ip }} GW: {{ eth1_gw }}"
  tags:
    - configure
    - network

- name: Create NIC-1 network config
  template:
    src: network-interface/aws/eth0-cfg.j2
    dest: /etc/network/interfaces.d/{{ eth0 }}.cfg
    owner: root
    group: root
  become: true
  tags:
    - configure
    - network

- name: Create NIC-2 network config
  template:
    src: network-interface/aws/eth1-cfg.j2
    dest: /etc/network/interfaces.d/{{ eth1 }}.cfg
    owner: root
    group: root
  become: true
  tags:
    - configure
    - network

- name: Restarting Network
  service:
    name: networking
    state: restarted
  become: yes
  tags:
    - configure
    - network
